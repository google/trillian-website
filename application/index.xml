<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Applications on Transparency.dev</title>
    <link>https://transparency.dev/application/</link>
    <description>Recent content in Applications on Transparency.dev</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://transparency.dev/application/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://transparency.dev/application/discourage-misbehaviour-by-third-parties/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://transparency.dev/application/discourage-misbehaviour-by-third-parties/</guid>
      <description>HTTPS security relies on hundreds of Certificate Authorities (CAs) whose job is to issue certificates while checking that the requester is eligible. For example, they should only issue a certificate for mozilla.org to entities that can prove they control mozilla.org (hopefully only authorized people at Mozilla!).
Unfortunately any CA can issue a certificate for any domain (more or less). So an obscure CA in Russia could issue a legitimate certificate for a UK bank.</description>
    </item>
    
    <item>
      <title>Add tamper checking to a package manager</title>
      <link>https://transparency.dev/application/add-tamper-checking-to-a-package-manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://transparency.dev/application/add-tamper-checking-to-a-package-manager/</guid>
      <description>Advantages  Ensure all users receive exactly the same code for a given package version. Protect you against hacked Github accounts force-pushing malicious code. Minimise the impact of a hacked download server. Protect you from a man-in-the-middle attack serving a tampered package with malicious code. Prevent upstream authors modifying the source code of an existing released version.   How it works Tamper checking means the ability to detect if a package file has been modified since it was first added to the package manager.</description>
    </item>
    
    <item>
      <title>Discourage misbehaviour by third parties in Certificate Transparency</title>
      <link>https://transparency.dev/application/discourage-misbehaviour-by-third-parties-in-certificate-transparency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://transparency.dev/application/discourage-misbehaviour-by-third-parties-in-certificate-transparency/</guid>
      <description>Trillan helps you Discourage misbehaviour by third parties in Certificate Transparency    HTTPS security relies on hundreds of Certificate Authorities (CAs) whose job is to issue certificates while checking that the requester is eligible. For example, they should only issue a certificate for mozilla.org to entities that can prove they control mozilla.org (hopefully only authorized people at Mozilla!).
Unfortunately any CA can issue a certificate for any domain (more or less).</description>
    </item>
    
    <item>
      <title>Reliably log all actions performed on your servers</title>
      <link>https://transparency.dev/application/reliably-log-all-actions-performed-on-your-servers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://transparency.dev/application/reliably-log-all-actions-performed-on-your-servers/</guid>
      <description>Advantages  Guarantee that an audit record is created for all actions performed on your servers. Configure servers to block and report actions that weren&amp;rsquo;t already logged. Any malicious actions are permanently logged, increasing the likelihood of discovery. You can integrate additional code to monitor the log for potentially malicious actions. It simplifies incident response and forensic analysis as you&amp;rsquo;ve got a complete log you can rely on. You can prove to auditors exactly what actions were performed on each server.</description>
    </item>
    
    <item>
      <title>Strengthen discovery of encryption keys</title>
      <link>https://transparency.dev/application/strengthen-discovery-of-encryption-keys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://transparency.dev/application/strengthen-discovery-of-encryption-keys/</guid>
      <description>Key Transparency offers tamper-evident key discovery Key Transparency is a design for a tamper-evident key discovery service that providers of end-to-end encryption services could implement. Key Transparency solves the problem of key discovery using Trillian&amp;rsquo;s Map Mode.
Advantages of Key Transparency  Automate user discovery of end-to-end encryption keys. Provide a shared global view of public keys - everyone should see the same public key for a given username. Increase the difficulty of an attacker performing a man-in-the-middle attack.</description>
    </item>
    
    <item>
      <title>Transparency.dev Summit</title>
      <link>https://transparency.dev/summit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://transparency.dev/summit/</guid>
      <description>Transparency.dev Summit       Join us for Transparency.dev Summit at Google London (6 Pancras Sq, London N1C 4AG) on October 9-11, 2024. This event aims to bring together implementers, operators, and clients of real world transparency systems in order to meet peers, share best practices, and learn about the latest developments in the community. In addition to general transparency topics, the event will also feature dedicated sessions for the Certificate Transparency community (e.</description>
    </item>
    
  </channel>
</rss>
